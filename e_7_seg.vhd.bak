library ieee;
use ieee.std_logic_1164.all;
-- A sequence detector FSM
-- SW0 is the active low synchronous reset, SW1 is the w input, and KEY0 is the clock.
-- The z output appears on LEDR0, and the state is indicated on LEDR8..0
entity e_7_seg is 
   port (   
				clk 								:in    std_logic;
				input_number    			   :in    integer := 0;
				segment_drive_vector       :out   std_logic_vector(6 downto 0)

				);
end entity e_7_seg;

architecture a_7_seg of e_7_seg is

---- Declaration Part -----------------------------------------------

-- Signal Declarations

	signal slv_output_0 : std_logic_vector(6 downto 0) :="0000001";
	
	signal slv_output_1 		: std_logic_vector(6 downto 0) :="1001111";
	signal slv_output_2 		: std_logic_vector(6 downto 0) :="0010010";
	signal slv_output_3 		: std_logic_vector(6 downto 0) :="0000110";
	signal slv_output_4 		: std_logic_vector(6 downto 0) :="1001100";
	signal slv_output_5 		: std_logic_vector(6 downto 0) :="0100100";
	signal slv_output_6 		: std_logic_vector(6 downto 0) :="0100000";
	signal slv_output_7 		: std_logic_vector(6 downto 0) :="0001111";
	signal slv_output_8     : std_logic_vector(6 downto 0) :="0000000";
	signal slv_output_9 	   : std_logic_vector(6 downto 0) :="0000100";  
	signal slv_output_fail  : std_logic_vector(6 downto 0) :="1111110";  	

--
begin

---- Assignment Part ------------------------------------------------

-- Concurrent Assignments:

 
      
   Hex_assignment: process (clk,input_number) -- state table
   begin
      case input_number is
			when 0 => segment_drive_vector <= slv_output_0;
			
			when 1 => segment_drive_vector <= slv_output_1;
			
			when 2 => segment_drive_vector <= slv_output_2;
			
			when 3 => segment_drive_vector <= slv_output_3;
			
			when 4 => segment_drive_vector <= slv_output_4;
			
			when 5 => segment_drive_vector <= slv_output_5;
			
			when 6 => segment_drive_vector <= slv_output_6;
			
			when 7 => segment_drive_vector <= slv_output_7;
			
			when 8 => segment_drive_vector <= slv_output_8;
			
			when 9 => segment_drive_vector <= slv_output_9;
			
         when others => segment_drive_vector <= slv_output_Fail;
      end case;
   end process Hex_assignment; -- state_table

  
end architecture e_7_seg;